// main.dart (AFTER changes)
import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'firebase_options.dart'; // This file is generated by FlutterFire CLI
import 'screen/home/home_screen.dart'; // Adjust path if necessary
// import 'package:flutter/foundation.dart'; // <--- REMOVE THIS if only used for kReleaseMode

void main() async {
  WidgetsFlutterBinding.ensureInitialized(); // Ensures Flutter engine is initialized
  await Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform, // Initialize Firebase
  );
  // Optional: Catch all Flutter errors
  FlutterError.onError = (FlutterErrorDetails details) {
    FlutterError.presentError(details);
    // You might also want to send these errors to a crash reporting service like Firebase Crashlytics
    // FirebaseCrashlytics.instance.recordFlutterError(details);
  };
  runApp(const MyApp()); // <--- Direct call to MyApp
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Travel AI App', // Your app's title
      debugShowCheckedModeBanner: false, // Set to false to remove the debug banner
      theme: ThemeData(
        brightness: Brightness.dark, // Dark theme for the app
        primaryColor: const Color(0xFF0084FF), // Primary color
        colorScheme: ColorScheme.fromSwatch(
          primarySwatch: Colors.blue, // Primary color swatch
          brightness: Brightness.dark,
        ).copyWith(secondary: const Color(0xFFC86FAE)), // Accent color
        scaffoldBackgroundColor: Colors.black, // Background color for scaffolds
        appBarTheme: const AppBarTheme(
          backgroundColor: Colors.black, // App bar background
          foregroundColor: Colors.white, // App bar text/icon color
        ),
        // Define text theme for better readability on dark background
        textTheme: const TextTheme(
          bodyLarge: TextStyle(color: Colors.white),
          bodyMedium: TextStyle(color: Colors.white70),
          titleLarge: TextStyle(color: Colors.white),
          titleMedium: TextStyle(color: Colors.white),
          titleSmall: TextStyle(color: Colors.white),
        ),
        // Input decoration theme for text fields
        inputDecorationTheme: const InputDecorationTheme(
          labelStyle: TextStyle(color: Colors.white70),
          hintStyle: TextStyle(color: Colors.white54),
          border: OutlineInputBorder(
            borderSide: BorderSide(color: Colors.white),
            borderRadius: BorderRadius.all(Radius.circular(10.0)),
          ),
          enabledBorder: OutlineInputBorder(
            borderSide: BorderSide(color: Colors.white54, width: 2.0),
            borderRadius: BorderRadius.all(Radius.circular(10.0)),
          ),
          focusedBorder: OutlineInputBorder(
            borderSide: BorderSide(color: Colors.white, width: 2.0),
            borderRadius: BorderRadius.all(Radius.circular(10.0)),
          ),
          errorBorder: OutlineInputBorder(
            borderSide: BorderSide(color: Colors.redAccent, width: 2.0),
            borderRadius: BorderRadius.all(Radius.circular(10.0)),
          ),
          focusedErrorBorder: OutlineInputBorder(
            borderSide: BorderSide(color: Colors.red, width: 2.0),
            borderRadius: BorderRadius.all(Radius.circular(10.0)),
          ),
        ),
        cardTheme: CardTheme(
          color: Colors.grey[900], // Dark background for cards
          elevation: 4,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(10),
          ),
        ),
      ),
      home: const HomeScreen(), // Set HomeScreen as the starting screen
    );
  }
}